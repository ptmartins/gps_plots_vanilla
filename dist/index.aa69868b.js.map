{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["(function () {\n\n    /**\n     * DOM object\n     */\n    const DOM = {};\n\n    /**\n     * Leaflet map object\n     */\n    let map = null;\n\n    /**\n     * Species object\n     */\n    const species = [];\n\n    /**\n     * Data species\n     */\n    let dataSpecies = 'all';\n\n    /**\n     * Leaflet map options\n     */\n    const mapOptions = {\n        center: [38.7223, -9.1393],\n        zoom: 7,\n        maxZoom: 16,\n        minZoom: 7\n    };\n\n    const mapCorners = {\n        1: L.latLng(45.00, -7.00),\n        2: L.latLng(35.00, -11.00)\n    };\n\n    /**\n     * Data\n     */\n    let data = null;\n\n    /**\n     * Menu pbject\n     */\n    const menu = {\n        dashboard: {\n            title: 'Dashboard',\n            icon: 'fa-solid fa-gauge-high',\n            path: '/dashboard'\n        },\n        map: {\n            title: 'Map',\n            icon: 'fa-solid fa-location-dot',\n            path: '/map'\n        },\n        observations: {\n            title: 'Observations',\n            icon: 'fa-solid fa-table-list',\n            path: '/observations'\n        }\n    };\n\n    /**\n     * Stats object\n     */\n    const stats = {\n        totalObservations: 0,\n        species: {},\n        totalSpecies: 0,\n        totalGroupSize: 0,\n        avgGroupSize: 0\n    };\n\n    /**\n     * Caches DOM elements\n     */\n    const cacheDOM = () => {\n        DOM.loadingSpinner = document.getElementById('loading');\n        DOM.navList = document.getElementById('navList');\n        DOM.appHeader = document.getElementById('appHeader');\n        DOM.appBody = document.getElementById('appBody');\n        DOM.appFooter = document.getElementById('appFooter');\n    };\n\n    /**\n     * View elements\n     */\n    const view = {\n        appTitle: () => {\n            const title = document.createElement('H2');\n\n            title.className = 'app_title';\n            title.textContent = 'GPS Plots';\n\n            return title;\n        },\n        viewTitle: (txt) => {\n            const title = document.createElement('H2');\n            title.className = 'view__title';\n            title.textContent = txt;\n\n            return title;\n        },\n        welcome: user => {\n            const welcome = document.createElement('DIV');\n            let _user = user ?? 'Pedro';\n\n            welcome.className = 'app_welcome';\n            welcome.textContent = `Welcome, ${_user}`;\n\n            return welcome;\n        },\n        statsCard: (title, value, variation, icon) => {\n            const _card = document.createElement('DIV');\n            const _title = document.createElement('H3');\n            const _value = document.createElement('SPAN');\n            const _variation = document.createElement('SPAN');\n            const _icon = document.createElement('I');\n\n            _card.className = 'stats__card';\n            _title.className = 'stats__card__title';\n            _value.className = 'stats__card__value';\n            _variation.className = 'stats__card__variation';\n            _icon.className = 'stats__card__icon';\n\n            _title.textContent = title;\n            _value.textContent = value;\n\n            _card.append(_title, _value);\n\n            if (variation && !icon) {\n                _variation.textContent = variation;\n                _card.appendChild(_variation);\n            }\n\n            if (icon && !variation) {\n                const classes = icon.split(' ');\n                classes.forEach(cls => {\n                    _icon.classList.add(cls);\n                });\n                _card.appendChild(_icon);\n            }\n\n\n            return _card;\n        },\n        menuItem: (title, icon, path) => {\n            const _item = document.createElement('LI');\n            const classes = icon.split(' ');\n\n            _item.className = 'nav__item';\n\n            classes.forEach(cls => {\n                _item.classList.add(cls);\n            });\n\n            _item.setAttribute('title', title);\n            _item.setAttribute('data-path', path);\n\n            return _item;\n        },\n        listItem: (icon, date, species, groupSize, lat, long) => {\n            const _listItem = document.createElement('DIV');\n            const _icon = document.createElement('I');\n            const _date = document.createElement('TIME');\n            const _species = document.createElement('H3');\n            const _groupSize = document.createElement('P');\n            const _coordinates = document.createElement('DIV');\n            const _lat = document.createElement('SPAN');\n            const _long = document.createElement('SPAN');\n\n            const classes = icon.split(' ');\n            _icon.className = 'list__item__icon';\n            classes.forEach(cls => {\n                _icon.classList.add(cls);\n            });\n\n            _listItem.className = 'list__item';\n            _date.className = 'list__item__date';\n            _species.className = 'list__item__species';\n            _groupSize.className = 'list__item__groupSize';\n            _coordinates.className = 'list__item__coordinates';\n            _lat.className = 'list__item__lat';\n            _long.className = 'list__item__long';\n\n            _date.textContent = date;\n            _species.textContent = species;\n            _groupSize.textContent = groupSize;\n            _lat.textContent = lat;\n            _long.textContent = long;\n\n            _coordinates.append(_lat, _long);\n\n            _listItem.append(_icon, _date, _species);\n\n            if (groupSize) {\n                _listItem.appendChild(_groupSize);\n            }\n\n            if (lat && long) {\n                _listItem.appendChild(_coordinates);\n            }\n\n            return _listItem;\n        },\n        panel: (title, className) => {\n            const panel = document.createElement('DIV');\n            const header = document.createElement('H2');\n            const body = document.createElement('DIV');\n\n            panel.className = 'panel';\n            header.className = 'panel__header';\n            header.textContent = title;\n\n            if (className) {\n                panel.classList.add(className);\n            }\n\n            panel.append(header, body);\n\n            return panel;\n        },\n        map: () => {\n            const map = document.createElement('DIV');\n\n            map.id = 'map';\n            map.className = 'map';\n\n            return map;\n        },\n        select: (data, species) => {\n            const select = document.createElement('SELECT');\n            const option = document.createElement('OPTION');\n            option.value = 'all';\n            option.textContent = 'All species';\n            select.appendChild(option);\n\n            species.forEach(item => {\n                const option = document.createElement('OPTION');\n                option.value = item;\n                option.textContent = item;\n                select.appendChild(option);\n            });\n\n            select.addEventListener('change', ev => {\n                dataSpecies = ev.target.value;\n\n                if (map) {\n                    map.remove();\n                }\n\n                renderMap(data, dataSpecies);\n            });\n\n            return select;\n        }\n    };\n\n    /**\n     * Renders Header section\n     */\n    const renderHeader = () => {\n        const title = view.appTitle();\n        const welcome = view.welcome();\n\n        DOM.appHeader.append(title, welcome);\n    };\n\n    /**\n     * Renders Footer section\n     */\n    const renderFooter = () => {\n        DOM.appFooter.innerHTML = `\n            <p>GPS Plots - © 2022 </p>\n            <p>Developed with ♥ by <a href=\"https://ptmartins.gothub.io\" target=\"_blank\">Pedro Martins</a></p>\n        `;\n    };\n\n    /**\n     * Show map\n     */\n    const showMap = (data, dataSpecies) => {\n        clearAppBody();\n        setBodyClass(DOM.appBody, 'app__body app__body--map');\n\n        const title = view.viewTitle('Map');\n        const select = view.select(data, species);\n        const _map = view.map();\n\n        title.appendChild(select);\n        DOM.appBody.appendChild(title);\n        DOM.appBody.appendChild(_map);\n\n        renderMap(data, dataSpecies);\n    };\n\n    /**\n     * \n     * @param {*} data \n     * @param {*} dataSpecies \n     */\n    const renderMap = (data, dataSpecies) => {\n\n        setTimeout(() => {\n            map = L.map('map').setView(mapOptions.center, mapOptions.zoom);\n            map.options.maxZoom = mapOptions.maxZoom;\n            map.options.minZoom = mapOptions.minZoom;\n            map.setMaxBounds([mapCorners[1], mapCorners[2]]);\n            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                maxZoom: 16,\n                attribution: '© OpenStreetMap'\n            }).addTo(map);\n            addPoints(data, map);\n        }, 1000)\n    };\n\n    /**\n     * Add markers to map\n     */\n    addPoints = (data, map) => {\n\n        for (var i = 0; i < data.length; i++) {\n            if (dataSpecies === 'all') {\n\n                L.marker([data[i].latitude, data[i].longitude])\n                    .bindPopup(data[i].common_name)\n                    .addTo(map);\n            }\n            else if (dataSpecies == data[i].common_name) {\n\n                L.marker([data[i].latitude, data[i].longitude])\n                    .bindPopup(data[i].common_name)\n                    .addTo(map);\n            }\n        }\n    };\n\n    /**\n     * Show list of observations\n     */\n    const showObservations = data => {\n        setBodyClass(DOM.appBody, 'app__body app__body--observations');\n\n        clearAppBody();\n        DOM.appBody.appendChild(view.viewTitle('Observations'));\n\n        const table = document.createElement('DIV');\n        const tableHeader = document.createElement('DIV');\n        const tableBody = document.createElement('DIV');\n\n        table.className = 'table';\n        tableHeader.className = 'table__header';\n        tableBody.className = 'table__body';\n\n        for (let i = 0; i < 5; i++) {\n            const headerCell = document.createElement('SPAN');\n\n            switch (i) {\n                case 0:\n                    headerCell.textContent = '';\n                    break;\n                case 1:\n                    headerCell.textContent = 'Date';\n                    break;\n                case 2:\n                    headerCell.textContent = 'Species';\n                    break;\n                case 3:\n                    headerCell.textContent = 'Group Size';\n                    break;\n                case 4:\n                    headerCell.textContent = 'Coordinates';\n                    break;\n                default:\n                    break;\n\n            }\n\n            tableHeader.appendChild(headerCell);\n        }\n\n        data.forEach(item => {\n            const row = view.listItem('fa-solid fa-binoculars', item.date_time, item.common_name, item.group_size, item.latitude, item.longitude);\n            tableBody.appendChild(row);\n        })\n\n        table.append(tableHeader, tableBody);\n\n        DOM.appBody.appendChild(table);\n    };\n\n    /**\n     * Set app body modifier class\n     * \n     * @param {*} el \n     * @param {*} newClasses \n     */\n    const setBodyClass = (el, newClasses) => {\n        let classes = newClasses.split(' ');\n        el.classList.remove(...el.classList);\n        classes.forEach(cls => {\n            el.classList.add(cls);\n        });\n    }\n\n    /**\n     * Show list of observations\n     */\n    const showDashboard = data => {\n\n        setBodyClass(DOM.appBody, 'app__body app__body--dashboard');\n\n        clearAppBody();\n        calcStats(data);\n        showDashboardChart(data);\n        showLastObservations(data);\n    }\n\n    /**\n     * Show Dashboard data\n     * \n     * @param {*} data \n     */\n    const showDashboardChart = data => {\n        const container = document.createElement('DIV');\n        const canvas = document.createElement('CANVAS');\n        const ctx = canvas.getContext('2d');\n        const labels = Object.keys(stats.species);\n        const dataVals = Object.values(stats.species);\n\n        container.className = 'panel panel--dashBoardChart';\n        canvas.className = 'panel__canvas';\n        canvas.id = 'dashBoardChart';\n\n        container.appendChild(canvas);\n\n        labels.forEach((label, i) => {\n            let names = label.split(' ');\n            names.forEach((name, j) => {\n                if (names.length > 1 && j == 0) {\n                    names[j] = name.charAt(0).toUpperCase() + '.';\n                }\n\n                label = names.join(' ');\n            });\n            labels[i] = label;\n        });\n\n        const settings = {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: 'Observations by species',\n                        data: dataVals\n                    }\n                ]\n            },\n            options: {\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: {\n                            display: false\n                        }\n                    },\n                    y: {\n                        grid: {\n                            display: false\n                        }\n                    }\n                }\n            }\n        }\n\n        new Chart(ctx, settings);\n\n        DOM.appBody.appendChild(container);\n    }\n\n    /**\n     * \n     * @param {*} data \n     */\n    const showLastObservations = data => {\n        const container = view.panel('Last Observations', 'panel--lastObservations');\n\n        for (let i = 0; i < 8; i++) {\n            let item = view.listItem('fa-solid fa-binoculars', data[i].date_time, data[i].common_name);\n\n            container.appendChild(item);\n        }\n\n        DOM.appBody.appendChild(container);\n    };\n\n    /**\n     * Clears app body\n     */\n    const clearAppBody = () => {\n        DOM.appBody.innerHTML = '';\n    };\n\n    /**\n     * Renders Navigation section\n     * @param {*} obj \n     */\n    const renderNav = (obj) => {\n        DOM.menuItems = [];\n\n        for (let item in obj) {\n            const _item = view.menuItem(obj[item].title, obj[item].icon, obj[item].path);\n            DOM.navList.appendChild(_item);\n\n            DOM.menuItems.push(_item);\n        }\n    };\n\n    /**\n     * Renders stats cards for homepage\n     * @param {*} data \n     */\n    const calcStats = data => {\n\n        data.forEach(item => {\n            stats.totalObservations += 1;\n            if (stats.species[item.scientific_name]) {\n                stats.species[item.scientific_name] += 1;\n            } else {\n                stats.species[item.scientific_name] = 1;\n            }\n\n            stats.totalGroupSize += item.group_size;\n            stats.avgGroupSize = Math.round(stats.totalGroupSize / stats.totalObservations);\n        });\n\n        for (let el in stats.species) {\n            stats.totalSpecies += 1;\n        }\n\n        renderStats();\n    };\n\n    /**\n     * Render stats cards\n     */\n    renderStats = () => {\n        const totalSpeciesCard = view.statsCard('Total Species', stats.totalSpecies, undefined, 'fa-solid fa-hashtag');\n        const totalObservationsCard = view.statsCard('Total Observations', stats.totalObservations, undefined, 'fa-solid fa-binoculars');\n        const avgGroupSizeCard = view.statsCard('Average Group Size', stats.avgGroupSize, undefined, 'fa-solid fa-binoculars');\n        const statsWrapper = document.createElement('DIV');\n\n        statsWrapper.className = 'stats__wrapper';\n\n        statsWrapper.append(totalSpeciesCard, totalObservationsCard, avgGroupSizeCard);\n\n        DOM.appBody.appendChild(statsWrapper);\n    };\n\n    /**\n     * Hide loading spinner\n     */\n    const hideLoading = () => {\n        DOM.loadingSpinner.style.display = 'none'\n    }\n\n    /**\n     * Fectches data from JSON\n     */\n    const fetchData = async () => {\n        const response = await fetch('/data/data.json');\n        data = await response.json().then(data => {\n            setTimeout(() => {\n                sortData(data);\n                hideLoading();\n                getSpecies(data);\n                calcStats(data);\n                showDashboard(data);\n                setupEvents(data);\n            }, 1000)\n        });\n    };\n\n    /**\n     * Get species from data\n     */\n    const getSpecies = data => {\n\n        data.forEach(item => {\n            let _species = item.common_name;\n            if (!species.includes(_species)) {\n                species.push(_species);\n            }\n        });\n    };\n\n    /**\n     * Sort data from newest to oldest\n     * \n     * @param {*} data \n     */\n    const sortData = data => {\n\n        const options = {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n        };\n\n        const locale = navigator.language;\n\n        data.forEach(item => {\n            item.date_time = new Date(item.date_time).toLocaleString(locale, options);\n        });\n        data.sort((a, b) => new Date(b.date_time) - new Date(a.date_time));\n    };\n\n    /**\n     * Setup events\n     */\n    const setupEvents = (data) => {\n        DOM.menuItems.forEach(item => {\n            item.addEventListener('click', () => {\n                const path = item.getAttribute('data-path');\n\n                if (path === '/map') {\n                    showMap(data, dataSpecies);\n                } else if (path === '/observations') {\n                    showObservations(data);\n                } else if (path === '/dashboard') {\n                    showDashboard(data);\n                }\n            });\n        })\n    }\n\n    /**\n     * Render layout\n     */\n    const renderLayout = () => {\n        renderHeader();\n        renderFooter();\n        renderNav(menu);\n    }\n\n    /**\n     * Initializes app\n     */\n    const init = () => {\n        cacheDOM();\n        renderLayout();\n        fetchData();\n    };\n\n    window.addEventListener('DOMContentLoaded', init);\n\n})();"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}