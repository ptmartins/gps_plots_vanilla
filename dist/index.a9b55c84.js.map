{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["(function() {\n    /**\n     * DOM object\n     */ const DOM = {};\n    /**\n     * Leaflet map object\n     */ let map = null;\n    /**\n     * Species object\n     */ const species = [];\n    /**\n     * Data species\n     */ let dataSpecies = \"all\";\n    /**\n     * Leaflet map options\n     */ const mapOptions = {\n        center: [\n            38.7223,\n            -9.1393\n        ],\n        zoom: 7,\n        maxZoom: 16,\n        minZoom: 7\n    };\n    const mapCorners = {\n        1: L.latLng(45.00, -7),\n        2: L.latLng(35.00, -11)\n    };\n    /**\n     * Data\n     */ let data = null;\n    /**\n     * Menu pbject\n     */ const menu = {\n        dashboard: {\n            title: \"Dashboard\",\n            icon: \"fa-solid fa-gauge-high\",\n            path: \"/dashboard\"\n        },\n        map: {\n            title: \"Map\",\n            icon: \"fa-solid fa-location-dot\",\n            path: \"/map\"\n        },\n        observations: {\n            title: \"Observations\",\n            icon: \"fa-solid fa-table-list\",\n            path: \"/observations\"\n        }\n    };\n    /**\n     * Stats object\n     */ const stats = {\n        totalObservations: 0,\n        species: {},\n        totalSpecies: 0,\n        totalGroupSize: 0,\n        avgGroupSize: 0\n    };\n    /**\n     * Caches DOM elements\n     */ const cacheDOM = ()=>{\n        DOM.loadingSpinner = document.getElementById(\"loading\");\n        DOM.navList = document.getElementById(\"navList\");\n        DOM.appHeader = document.getElementById(\"appHeader\");\n        DOM.appBody = document.getElementById(\"appBody\");\n        DOM.appFooter = document.getElementById(\"appFooter\");\n    };\n    /**\n     * View elements\n     */ const view = {\n        appTitle: ()=>{\n            const title = document.createElement(\"H2\");\n            title.className = \"app_title\";\n            title.textContent = \"GPS Plots\";\n            return title;\n        },\n        viewTitle: (txt)=>{\n            const title = document.createElement(\"H2\");\n            title.className = \"view__title\";\n            title.textContent = txt;\n            return title;\n        },\n        welcome: (user)=>{\n            const welcome = document.createElement(\"DIV\");\n            let _user = user ?? \"Pedro\";\n            welcome.className = \"app_welcome\";\n            welcome.textContent = `Welcome, ${_user}`;\n            return welcome;\n        },\n        statsCard: (title, value, variation, icon)=>{\n            const _card = document.createElement(\"DIV\");\n            const _title = document.createElement(\"H3\");\n            const _value = document.createElement(\"SPAN\");\n            const _variation = document.createElement(\"SPAN\");\n            const _icon = document.createElement(\"I\");\n            _card.className = \"stats__card\";\n            _title.className = \"stats__card__title\";\n            _value.className = \"stats__card__value\";\n            _variation.className = \"stats__card__variation\";\n            _icon.className = \"stats__card__icon\";\n            _title.textContent = title;\n            _value.textContent = value;\n            _card.append(_title, _value);\n            if (variation && !icon) {\n                _variation.textContent = variation;\n                _card.appendChild(_variation);\n            }\n            if (icon && !variation) {\n                const classes = icon.split(\" \");\n                classes.forEach((cls)=>{\n                    _icon.classList.add(cls);\n                });\n                _card.appendChild(_icon);\n            }\n            return _card;\n        },\n        menuItem: (title, icon, path)=>{\n            const _item = document.createElement(\"LI\");\n            const classes = icon.split(\" \");\n            _item.className = \"nav__item\";\n            classes.forEach((cls)=>{\n                _item.classList.add(cls);\n            });\n            _item.setAttribute(\"title\", title);\n            _item.setAttribute(\"data-path\", path);\n            return _item;\n        },\n        listItem: (icon, date, species, groupSize, lat, long)=>{\n            const _listItem = document.createElement(\"DIV\");\n            const _icon = document.createElement(\"I\");\n            const _date = document.createElement(\"TIME\");\n            const _species = document.createElement(\"H3\");\n            const _groupSize = document.createElement(\"P\");\n            const _coordinates = document.createElement(\"DIV\");\n            const _lat = document.createElement(\"SPAN\");\n            const _long = document.createElement(\"SPAN\");\n            const classes = icon.split(\" \");\n            _icon.className = \"list__item__icon\";\n            classes.forEach((cls)=>{\n                _icon.classList.add(cls);\n            });\n            _listItem.className = \"list__item\";\n            _date.className = \"list__item__date\";\n            _species.className = \"list__item__species\";\n            _groupSize.className = \"list__item__groupSize\";\n            _coordinates.className = \"list__item__coordinates\";\n            _lat.className = \"list__item__lat\";\n            _long.className = \"list__item__long\";\n            _date.textContent = date;\n            _species.textContent = species;\n            _groupSize.textContent = groupSize;\n            _lat.textContent = lat;\n            _long.textContent = long;\n            _coordinates.append(_lat, _long);\n            _listItem.append(_icon, _date, _species);\n            if (groupSize) _listItem.appendChild(_groupSize);\n            if (lat && long) _listItem.appendChild(_coordinates);\n            return _listItem;\n        },\n        panel: (title, className)=>{\n            const panel = document.createElement(\"DIV\");\n            const header = document.createElement(\"H2\");\n            const body = document.createElement(\"DIV\");\n            panel.className = \"panel\";\n            header.className = \"panel__header\";\n            header.textContent = title;\n            if (className) panel.classList.add(className);\n            panel.append(header, body);\n            return panel;\n        },\n        map: ()=>{\n            const map = document.createElement(\"DIV\");\n            map.id = \"map\";\n            map.className = \"map\";\n            return map;\n        },\n        select: (data, species)=>{\n            const select = document.createElement(\"SELECT\");\n            const option = document.createElement(\"OPTION\");\n            option.value = \"all\";\n            option.textContent = \"All species\";\n            select.appendChild(option);\n            species.forEach((item)=>{\n                const option = document.createElement(\"OPTION\");\n                option.value = item;\n                option.textContent = item;\n                select.appendChild(option);\n            });\n            select.addEventListener(\"change\", (ev)=>{\n                dataSpecies = ev.target.value;\n                if (map) map.remove();\n                renderMap(data, dataSpecies);\n            });\n            return select;\n        }\n    };\n    /**\n     * Renders Header section\n     */ const renderHeader = ()=>{\n        const title = view.appTitle();\n        const welcome = view.welcome();\n        DOM.appHeader.append(title, welcome);\n    };\n    /**\n     * Renders Footer section\n     */ const renderFooter = ()=>{\n        DOM.appFooter.innerHTML = `\n            <p>GPS Plots - © 2022 </p>\n            <p>Developed with ♥ by <a href=\"https://ptmartins.gothub.io\" target=\"_blank\">Pedro Martins</a></p>\n        `;\n    };\n    /**\n     * Show map\n     */ const showMap = (data, dataSpecies)=>{\n        clearAppBody();\n        setBodyClass(DOM.appBody, \"app__body app__body--map\");\n        const title = view.viewTitle(\"Map\");\n        const select = view.select(data, species);\n        const _map = view.map();\n        title.appendChild(select);\n        DOM.appBody.appendChild(title);\n        DOM.appBody.appendChild(_map);\n        renderMap(data, dataSpecies);\n    };\n    /**\n     * \n     * @param {*} data \n     * @param {*} dataSpecies \n     */ const renderMap = (data, dataSpecies)=>{\n        setTimeout(()=>{\n            map = L.map(\"map\").setView(mapOptions.center, mapOptions.zoom);\n            map.options.maxZoom = mapOptions.maxZoom;\n            map.options.minZoom = mapOptions.minZoom;\n            map.setMaxBounds([\n                mapCorners[1],\n                mapCorners[2]\n            ]);\n            L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                maxZoom: 16,\n                attribution: \"\\xa9 OpenStreetMap\"\n            }).addTo(map);\n            addPoints(data, map);\n        }, 1000);\n    };\n    /**\n     * Add markers to map\n     */ addPoints = (data, map)=>{\n        for(var i = 0; i < data.length; i++){\n            if (dataSpecies === \"all\") L.marker([\n                data[i].latitude,\n                data[i].longitude\n            ]).bindPopup(data[i].common_name).addTo(map);\n            else if (dataSpecies == data[i].common_name) L.marker([\n                data[i].latitude,\n                data[i].longitude\n            ]).bindPopup(data[i].common_name).addTo(map);\n        }\n    };\n    /**\n     * Show list of observations\n     */ const showObservations = (data)=>{\n        setBodyClass(DOM.appBody, \"app__body app__body--observations\");\n        clearAppBody();\n        DOM.appBody.appendChild(view.viewTitle(\"Observations\"));\n        const table = document.createElement(\"DIV\");\n        const tableHeader = document.createElement(\"DIV\");\n        const tableBody = document.createElement(\"DIV\");\n        table.className = \"table\";\n        tableHeader.className = \"table__header\";\n        tableBody.className = \"table__body\";\n        for(let i = 0; i < 5; i++){\n            const headerCell = document.createElement(\"SPAN\");\n            switch(i){\n                case 0:\n                    headerCell.textContent = \"\";\n                    break;\n                case 1:\n                    headerCell.textContent = \"Date\";\n                    break;\n                case 2:\n                    headerCell.textContent = \"Species\";\n                    break;\n                case 3:\n                    headerCell.textContent = \"Group Size\";\n                    break;\n                case 4:\n                    headerCell.textContent = \"Coordinates\";\n                    break;\n                default:\n                    break;\n            }\n            tableHeader.appendChild(headerCell);\n        }\n        data.forEach((item)=>{\n            const row = view.listItem(\"fa-solid fa-binoculars\", item.date_time, item.common_name, item.group_size, item.latitude, item.longitude);\n            tableBody.appendChild(row);\n        });\n        table.append(tableHeader, tableBody);\n        DOM.appBody.appendChild(table);\n    };\n    /**\n     * Set app body modifier class\n     * \n     * @param {*} el \n     * @param {*} newClasses \n     */ const setBodyClass = (el, newClasses)=>{\n        let classes = newClasses.split(\" \");\n        el.classList.remove(...el.classList);\n        classes.forEach((cls)=>{\n            el.classList.add(cls);\n        });\n    };\n    /**\n     * Show list of observations\n     */ const showDashboard = (data)=>{\n        setBodyClass(DOM.appBody, \"app__body app__body--dashboard\");\n        clearAppBody();\n        calcStats(data);\n        showDashboardChart(data);\n        showLastObservations(data);\n    };\n    /**\n     * Show Dashboard data\n     * \n     * @param {*} data \n     */ const showDashboardChart = (data)=>{\n        const container = document.createElement(\"DIV\");\n        const canvas = document.createElement(\"CANVAS\");\n        const ctx = canvas.getContext(\"2d\");\n        const labels = Object.keys(stats.species);\n        const dataVals = Object.values(stats.species);\n        container.className = \"panel panel--dashBoardChart\";\n        canvas.className = \"panel__canvas\";\n        canvas.id = \"dashBoardChart\";\n        container.appendChild(canvas);\n        labels.forEach((label, i)=>{\n            let names = label.split(\" \");\n            names.forEach((name, j)=>{\n                if (names.length > 1 && j == 0) names[j] = name.charAt(0).toUpperCase() + \".\";\n                label = names.join(\" \");\n            });\n            labels[i] = label;\n        });\n        const settings = {\n            type: \"bar\",\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: \"Observations by species\",\n                        data: dataVals\n                    }\n                ]\n            },\n            options: {\n                plugins: {\n                    legend: {\n                        position: \"bottom\"\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: {\n                            display: false\n                        }\n                    },\n                    y: {\n                        grid: {\n                            display: false\n                        }\n                    }\n                }\n            }\n        };\n        new Chart(ctx, settings);\n        DOM.appBody.appendChild(container);\n    };\n    /**\n     * \n     * @param {*} data \n     */ const showLastObservations = (data)=>{\n        const container = view.panel(\"Last Observations\", \"panel--lastObservations\");\n        for(let i = 0; i < 8; i++){\n            let item = view.listItem(\"fa-solid fa-binoculars\", data[i].date_time, data[i].common_name);\n            container.appendChild(item);\n        }\n        DOM.appBody.appendChild(container);\n    };\n    /**\n     * Clears app body\n     */ const clearAppBody = ()=>{\n        DOM.appBody.innerHTML = \"\";\n    };\n    /**\n     * Renders Navigation section\n     * @param {*} obj \n     */ const renderNav = (obj)=>{\n        DOM.menuItems = [];\n        for(let item in obj){\n            const _item = view.menuItem(obj[item].title, obj[item].icon, obj[item].path);\n            DOM.navList.appendChild(_item);\n            DOM.menuItems.push(_item);\n        }\n    };\n    /**\n     * Renders stats cards for homepage\n     * @param {*} data \n     */ const calcStats = (data)=>{\n        data.forEach((item)=>{\n            stats.totalObservations += 1;\n            if (stats.species[item.scientific_name]) stats.species[item.scientific_name] += 1;\n            else stats.species[item.scientific_name] = 1;\n            stats.totalGroupSize += item.group_size;\n            stats.avgGroupSize = Math.round(stats.totalGroupSize / stats.totalObservations);\n        });\n        for(let el in stats.species)stats.totalSpecies += 1;\n        renderStats();\n    };\n    /**\n     * Render stats cards\n     */ renderStats = ()=>{\n        const totalSpeciesCard = view.statsCard(\"Total Species\", stats.totalSpecies, undefined, \"fa-solid fa-hashtag\");\n        const totalObservationsCard = view.statsCard(\"Total Observations\", stats.totalObservations, undefined, \"fa-solid fa-binoculars\");\n        const avgGroupSizeCard = view.statsCard(\"Average Group Size\", stats.avgGroupSize, undefined, \"fa-solid fa-binoculars\");\n        const statsWrapper = document.createElement(\"DIV\");\n        statsWrapper.className = \"stats__wrapper\";\n        statsWrapper.append(totalSpeciesCard, totalObservationsCard, avgGroupSizeCard);\n        DOM.appBody.appendChild(statsWrapper);\n    };\n    /**\n     * Hide loading spinner\n     */ const hideLoading = ()=>{\n        DOM.loadingSpinner.style.display = \"none\";\n    };\n    /**\n     * Fectches data from JSON\n     */ const fetchData = async ()=>{\n        const response = await fetch(\"/data/data.json\");\n        data = await response.json().then((data)=>{\n            setTimeout(()=>{\n                sortData(data);\n                hideLoading();\n                getSpecies(data);\n                calcStats(data);\n                showDashboard(data);\n                setupEvents(data);\n            }, 1000);\n        });\n    };\n    /**\n     * Get species from data\n     */ const getSpecies = (data)=>{\n        data.forEach((item)=>{\n            let _species = item.common_name;\n            if (!species.includes(_species)) species.push(_species);\n        });\n    };\n    /**\n     * Sort data from newest to oldest\n     * \n     * @param {*} data \n     */ const sortData = (data)=>{\n        const options = {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\"\n        };\n        const locale = navigator.language;\n        data.forEach((item)=>{\n            item.date_time = new Date(item.date_time).toLocaleString(locale, options);\n        });\n        data.sort((a, b)=>new Date(b.date_time) - new Date(a.date_time));\n    };\n    /**\n     * Setup events\n     */ const setupEvents = (data)=>{\n        DOM.menuItems.forEach((item)=>{\n            item.addEventListener(\"click\", ()=>{\n                const path = item.getAttribute(\"data-path\");\n                if (path === \"/map\") showMap(data, dataSpecies);\n                else if (path === \"/observations\") showObservations(data);\n                else if (path === \"/dashboard\") showDashboard(data);\n            });\n        });\n    };\n    /**\n     * Render layout\n     */ const renderLayout = ()=>{\n        renderHeader();\n        renderFooter();\n        renderNav(menu);\n    };\n    /**\n     * Initializes app\n     */ const init = ()=>{\n        cacheDOM();\n        renderLayout();\n        fetchData();\n    };\n    window.addEventListener(\"DOMContentLoaded\", init);\n})();\n\n//# sourceMappingURL=index.a9b55c84.js.map\n","(function () {\n\n    /**\n     * DOM object\n     */\n    const DOM = {};\n\n    /**\n     * Leaflet map object\n     */\n    let map = null;\n\n    /**\n     * Species object\n     */\n    const species = [];\n\n    /**\n     * Data species\n     */\n    let dataSpecies = 'all';\n\n    /**\n     * Leaflet map options\n     */\n    const mapOptions = {\n        center: [38.7223, -9.1393],\n        zoom: 7,\n        maxZoom: 16,\n        minZoom: 7\n    };\n\n    const mapCorners = {\n        1: L.latLng(45.00, -7.00),\n        2: L.latLng(35.00, -11.00)\n    };\n\n    /**\n     * Data\n     */\n    let data = null;\n\n    /**\n     * Menu pbject\n     */\n    const menu = {\n        dashboard: {\n            title: 'Dashboard',\n            icon: 'fa-solid fa-gauge-high',\n            path: '/dashboard'\n        },\n        map: {\n            title: 'Map',\n            icon: 'fa-solid fa-location-dot',\n            path: '/map'\n        },\n        observations: {\n            title: 'Observations',\n            icon: 'fa-solid fa-table-list',\n            path: '/observations'\n        }\n    };\n\n    /**\n     * Stats object\n     */\n    const stats = {\n        totalObservations: 0,\n        species: {},\n        totalSpecies: 0,\n        totalGroupSize: 0,\n        avgGroupSize: 0\n    };\n\n    /**\n     * Caches DOM elements\n     */\n    const cacheDOM = () => {\n        DOM.loadingSpinner = document.getElementById('loading');\n        DOM.navList = document.getElementById('navList');\n        DOM.appHeader = document.getElementById('appHeader');\n        DOM.appBody = document.getElementById('appBody');\n        DOM.appFooter = document.getElementById('appFooter');\n    };\n\n    /**\n     * View elements\n     */\n    const view = {\n        appTitle: () => {\n            const title = document.createElement('H2');\n\n            title.className = 'app_title';\n            title.textContent = 'GPS Plots';\n\n            return title;\n        },\n        viewTitle: (txt) => {\n            const title = document.createElement('H2');\n            title.className = 'view__title';\n            title.textContent = txt;\n\n            return title;\n        },\n        welcome: user => {\n            const welcome = document.createElement('DIV');\n            let _user = user ?? 'Pedro';\n\n            welcome.className = 'app_welcome';\n            welcome.textContent = `Welcome, ${_user}`;\n\n            return welcome;\n        },\n        statsCard: (title, value, variation, icon) => {\n            const _card = document.createElement('DIV');\n            const _title = document.createElement('H3');\n            const _value = document.createElement('SPAN');\n            const _variation = document.createElement('SPAN');\n            const _icon = document.createElement('I');\n\n            _card.className = 'stats__card';\n            _title.className = 'stats__card__title';\n            _value.className = 'stats__card__value';\n            _variation.className = 'stats__card__variation';\n            _icon.className = 'stats__card__icon';\n\n            _title.textContent = title;\n            _value.textContent = value;\n\n            _card.append(_title, _value);\n\n            if (variation && !icon) {\n                _variation.textContent = variation;\n                _card.appendChild(_variation);\n            }\n\n            if (icon && !variation) {\n                const classes = icon.split(' ');\n                classes.forEach(cls => {\n                    _icon.classList.add(cls);\n                });\n                _card.appendChild(_icon);\n            }\n\n\n            return _card;\n        },\n        menuItem: (title, icon, path) => {\n            const _item = document.createElement('LI');\n            const classes = icon.split(' ');\n\n            _item.className = 'nav__item';\n\n            classes.forEach(cls => {\n                _item.classList.add(cls);\n            });\n\n            _item.setAttribute('title', title);\n            _item.setAttribute('data-path', path);\n\n            return _item;\n        },\n        listItem: (icon, date, species, groupSize, lat, long) => {\n            const _listItem = document.createElement('DIV');\n            const _icon = document.createElement('I');\n            const _date = document.createElement('TIME');\n            const _species = document.createElement('H3');\n            const _groupSize = document.createElement('P');\n            const _coordinates = document.createElement('DIV');\n            const _lat = document.createElement('SPAN');\n            const _long = document.createElement('SPAN');\n\n            const classes = icon.split(' ');\n            _icon.className = 'list__item__icon';\n            classes.forEach(cls => {\n                _icon.classList.add(cls);\n            });\n\n            _listItem.className = 'list__item';\n            _date.className = 'list__item__date';\n            _species.className = 'list__item__species';\n            _groupSize.className = 'list__item__groupSize';\n            _coordinates.className = 'list__item__coordinates';\n            _lat.className = 'list__item__lat';\n            _long.className = 'list__item__long';\n\n            _date.textContent = date;\n            _species.textContent = species;\n            _groupSize.textContent = groupSize;\n            _lat.textContent = lat;\n            _long.textContent = long;\n\n            _coordinates.append(_lat, _long);\n\n            _listItem.append(_icon, _date, _species);\n\n            if (groupSize) {\n                _listItem.appendChild(_groupSize);\n            }\n\n            if (lat && long) {\n                _listItem.appendChild(_coordinates);\n            }\n\n            return _listItem;\n        },\n        panel: (title, className) => {\n            const panel = document.createElement('DIV');\n            const header = document.createElement('H2');\n            const body = document.createElement('DIV');\n\n            panel.className = 'panel';\n            header.className = 'panel__header';\n            header.textContent = title;\n\n            if (className) {\n                panel.classList.add(className);\n            }\n\n            panel.append(header, body);\n\n            return panel;\n        },\n        map: () => {\n            const map = document.createElement('DIV');\n\n            map.id = 'map';\n            map.className = 'map';\n\n            return map;\n        },\n        select: (data, species) => {\n            const select = document.createElement('SELECT');\n            const option = document.createElement('OPTION');\n            option.value = 'all';\n            option.textContent = 'All species';\n            select.appendChild(option);\n\n            species.forEach(item => {\n                const option = document.createElement('OPTION');\n                option.value = item;\n                option.textContent = item;\n                select.appendChild(option);\n            });\n\n            select.addEventListener('change', ev => {\n                dataSpecies = ev.target.value;\n\n                if (map) {\n                    map.remove();\n                }\n\n                renderMap(data, dataSpecies);\n            });\n\n            return select;\n        }\n    };\n\n    /**\n     * Renders Header section\n     */\n    const renderHeader = () => {\n        const title = view.appTitle();\n        const welcome = view.welcome();\n\n        DOM.appHeader.append(title, welcome);\n    };\n\n    /**\n     * Renders Footer section\n     */\n    const renderFooter = () => {\n        DOM.appFooter.innerHTML = `\n            <p>GPS Plots - © 2022 </p>\n            <p>Developed with ♥ by <a href=\"https://ptmartins.gothub.io\" target=\"_blank\">Pedro Martins</a></p>\n        `;\n    };\n\n    /**\n     * Show map\n     */\n    const showMap = (data, dataSpecies) => {\n        clearAppBody();\n        setBodyClass(DOM.appBody, 'app__body app__body--map');\n\n        const title = view.viewTitle('Map');\n        const select = view.select(data, species);\n        const _map = view.map();\n\n        title.appendChild(select);\n        DOM.appBody.appendChild(title);\n        DOM.appBody.appendChild(_map);\n\n        renderMap(data, dataSpecies);\n    };\n\n    /**\n     * \n     * @param {*} data \n     * @param {*} dataSpecies \n     */\n    const renderMap = (data, dataSpecies) => {\n\n        setTimeout(() => {\n            map = L.map('map').setView(mapOptions.center, mapOptions.zoom);\n            map.options.maxZoom = mapOptions.maxZoom;\n            map.options.minZoom = mapOptions.minZoom;\n            map.setMaxBounds([mapCorners[1], mapCorners[2]]);\n            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                maxZoom: 16,\n                attribution: '© OpenStreetMap'\n            }).addTo(map);\n            addPoints(data, map);\n        }, 1000)\n    };\n\n    /**\n     * Add markers to map\n     */\n    addPoints = (data, map) => {\n\n        for (var i = 0; i < data.length; i++) {\n            if (dataSpecies === 'all') {\n\n                L.marker([data[i].latitude, data[i].longitude])\n                    .bindPopup(data[i].common_name)\n                    .addTo(map);\n            }\n            else if (dataSpecies == data[i].common_name) {\n\n                L.marker([data[i].latitude, data[i].longitude])\n                    .bindPopup(data[i].common_name)\n                    .addTo(map);\n            }\n        }\n    };\n\n    /**\n     * Show list of observations\n     */\n    const showObservations = data => {\n        setBodyClass(DOM.appBody, 'app__body app__body--observations');\n\n        clearAppBody();\n        DOM.appBody.appendChild(view.viewTitle('Observations'));\n\n        const table = document.createElement('DIV');\n        const tableHeader = document.createElement('DIV');\n        const tableBody = document.createElement('DIV');\n\n        table.className = 'table';\n        tableHeader.className = 'table__header';\n        tableBody.className = 'table__body';\n\n        for (let i = 0; i < 5; i++) {\n            const headerCell = document.createElement('SPAN');\n\n            switch (i) {\n                case 0:\n                    headerCell.textContent = '';\n                    break;\n                case 1:\n                    headerCell.textContent = 'Date';\n                    break;\n                case 2:\n                    headerCell.textContent = 'Species';\n                    break;\n                case 3:\n                    headerCell.textContent = 'Group Size';\n                    break;\n                case 4:\n                    headerCell.textContent = 'Coordinates';\n                    break;\n                default:\n                    break;\n\n            }\n\n            tableHeader.appendChild(headerCell);\n        }\n\n        data.forEach(item => {\n            const row = view.listItem('fa-solid fa-binoculars', item.date_time, item.common_name, item.group_size, item.latitude, item.longitude);\n            tableBody.appendChild(row);\n        })\n\n        table.append(tableHeader, tableBody);\n\n        DOM.appBody.appendChild(table);\n    };\n\n    /**\n     * Set app body modifier class\n     * \n     * @param {*} el \n     * @param {*} newClasses \n     */\n    const setBodyClass = (el, newClasses) => {\n        let classes = newClasses.split(' ');\n        el.classList.remove(...el.classList);\n        classes.forEach(cls => {\n            el.classList.add(cls);\n        });\n    }\n\n    /**\n     * Show list of observations\n     */\n    const showDashboard = data => {\n\n        setBodyClass(DOM.appBody, 'app__body app__body--dashboard');\n\n        clearAppBody();\n        calcStats(data);\n        showDashboardChart(data);\n        showLastObservations(data);\n    }\n\n    /**\n     * Show Dashboard data\n     * \n     * @param {*} data \n     */\n    const showDashboardChart = data => {\n        const container = document.createElement('DIV');\n        const canvas = document.createElement('CANVAS');\n        const ctx = canvas.getContext('2d');\n        const labels = Object.keys(stats.species);\n        const dataVals = Object.values(stats.species);\n\n        container.className = 'panel panel--dashBoardChart';\n        canvas.className = 'panel__canvas';\n        canvas.id = 'dashBoardChart';\n\n        container.appendChild(canvas);\n\n        labels.forEach((label, i) => {\n            let names = label.split(' ');\n            names.forEach((name, j) => {\n                if (names.length > 1 && j == 0) {\n                    names[j] = name.charAt(0).toUpperCase() + '.';\n                }\n\n                label = names.join(' ');\n            });\n            labels[i] = label;\n        });\n\n        const settings = {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: 'Observations by species',\n                        data: dataVals\n                    }\n                ]\n            },\n            options: {\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: {\n                            display: false\n                        }\n                    },\n                    y: {\n                        grid: {\n                            display: false\n                        }\n                    }\n                }\n            }\n        }\n\n        new Chart(ctx, settings);\n\n        DOM.appBody.appendChild(container);\n    }\n\n    /**\n     * \n     * @param {*} data \n     */\n    const showLastObservations = data => {\n        const container = view.panel('Last Observations', 'panel--lastObservations');\n\n        for (let i = 0; i < 8; i++) {\n            let item = view.listItem('fa-solid fa-binoculars', data[i].date_time, data[i].common_name);\n\n            container.appendChild(item);\n        }\n\n        DOM.appBody.appendChild(container);\n    };\n\n    /**\n     * Clears app body\n     */\n    const clearAppBody = () => {\n        DOM.appBody.innerHTML = '';\n    };\n\n    /**\n     * Renders Navigation section\n     * @param {*} obj \n     */\n    const renderNav = (obj) => {\n        DOM.menuItems = [];\n\n        for (let item in obj) {\n            const _item = view.menuItem(obj[item].title, obj[item].icon, obj[item].path);\n            DOM.navList.appendChild(_item);\n\n            DOM.menuItems.push(_item);\n        }\n    };\n\n    /**\n     * Renders stats cards for homepage\n     * @param {*} data \n     */\n    const calcStats = data => {\n\n        data.forEach(item => {\n            stats.totalObservations += 1;\n            if (stats.species[item.scientific_name]) {\n                stats.species[item.scientific_name] += 1;\n            } else {\n                stats.species[item.scientific_name] = 1;\n            }\n\n            stats.totalGroupSize += item.group_size;\n            stats.avgGroupSize = Math.round(stats.totalGroupSize / stats.totalObservations);\n        });\n\n        for (let el in stats.species) {\n            stats.totalSpecies += 1;\n        }\n\n        renderStats();\n    };\n\n    /**\n     * Render stats cards\n     */\n    renderStats = () => {\n        const totalSpeciesCard = view.statsCard('Total Species', stats.totalSpecies, undefined, 'fa-solid fa-hashtag');\n        const totalObservationsCard = view.statsCard('Total Observations', stats.totalObservations, undefined, 'fa-solid fa-binoculars');\n        const avgGroupSizeCard = view.statsCard('Average Group Size', stats.avgGroupSize, undefined, 'fa-solid fa-binoculars');\n        const statsWrapper = document.createElement('DIV');\n\n        statsWrapper.className = 'stats__wrapper';\n\n        statsWrapper.append(totalSpeciesCard, totalObservationsCard, avgGroupSizeCard);\n\n        DOM.appBody.appendChild(statsWrapper);\n    };\n\n    /**\n     * Hide loading spinner\n     */\n    const hideLoading = () => {\n        DOM.loadingSpinner.style.display = 'none'\n    }\n\n    /**\n     * Fectches data from JSON\n     */\n    const fetchData = async () => {\n        const response = await fetch('/data/data.json');\n        data = await response.json().then(data => {\n            setTimeout(() => {\n                sortData(data);\n                hideLoading();\n                getSpecies(data);\n                calcStats(data);\n                showDashboard(data);\n                setupEvents(data);\n            }, 1000)\n        });\n    };\n\n    /**\n     * Get species from data\n     */\n    const getSpecies = data => {\n\n        data.forEach(item => {\n            let _species = item.common_name;\n            if (!species.includes(_species)) {\n                species.push(_species);\n            }\n        });\n    };\n\n    /**\n     * Sort data from newest to oldest\n     * \n     * @param {*} data \n     */\n    const sortData = data => {\n\n        const options = {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n        };\n\n        const locale = navigator.language;\n\n        data.forEach(item => {\n            item.date_time = new Date(item.date_time).toLocaleString(locale, options);\n        });\n        data.sort((a, b) => new Date(b.date_time) - new Date(a.date_time));\n    };\n\n    /**\n     * Setup events\n     */\n    const setupEvents = (data) => {\n        DOM.menuItems.forEach(item => {\n            item.addEventListener('click', () => {\n                const path = item.getAttribute('data-path');\n\n                if (path === '/map') {\n                    showMap(data, dataSpecies);\n                } else if (path === '/observations') {\n                    showObservations(data);\n                } else if (path === '/dashboard') {\n                    showDashboard(data);\n                }\n            });\n        })\n    }\n\n    /**\n     * Render layout\n     */\n    const renderLayout = () => {\n        renderHeader();\n        renderFooter();\n        renderNav(menu);\n    }\n\n    /**\n     * Initializes app\n     */\n    const init = () => {\n        cacheDOM();\n        renderLayout();\n        fetchData();\n    };\n\n    window.addEventListener('DOMContentLoaded', init);\n\n})();"],"names":["DOM","map","species","dataSpecies","mapOptions","center","zoom","maxZoom","minZoom","mapCorners","L","latLng","menu","dashboard","title","icon","path","observations","stats","totalObservations","totalSpecies","totalGroupSize","avgGroupSize","cacheDOM","loadingSpinner","document","getElementById","navList","appHeader","appBody","appFooter","view","appTitle","createElement","className","textContent","viewTitle","txt","welcome","user","statsCard","value","variation","_card","_title","_value","_variation","_icon","append","appendChild","classes","split","forEach","cls","classList","add","menuItem","_item","setAttribute","listItem","date","groupSize","lat","long","_listItem","_date","_species","_groupSize","_coordinates","_lat","_long","panel","header","body","id","select","data","option","item","addEventListener","ev","target","remove","renderMap","renderHeader","renderFooter","innerHTML","showMap","clearAppBody","setBodyClass","_map","setTimeout","setView","options","setMaxBounds","tileLayer","attribution","addTo","addPoints","i","length","marker","latitude","longitude","bindPopup","common_name","showObservations","table","tableHeader","tableBody","headerCell","row","date_time","group_size","el","newClasses","showDashboard","calcStats","showDashboardChart","showLastObservations","container","canvas","ctx","getContext","labels","Object","keys","dataVals","values","label","names","name","j","charAt","toUpperCase","join","Chart","type","datasets","plugins","legend","position","scales","x","grid","display","y","renderNav","obj","menuItems","push","scientific_name","Math","round","renderStats","totalSpeciesCard","undefined","totalObservationsCard","avgGroupSizeCard","statsWrapper","hideLoading","style","fetchData","response","fetch","json","then","sortData","getSpecies","setupEvents","includes","year","month","day","locale","navigator","language","Date","toLocaleString","sort","a","b","getAttribute","renderLayout","window"],"version":3,"file":"index.a9b55c84.js.map"}